name: AWS Update ECS Service workflow

###
# Workflow to update ECS services.
#
# If ALL_SERVICES is true, we will update all services in the ECS cluster.
# If ALL_SERVICES is false or not defined, we will update only the service with the name SERVICE_NAME if exist in the ECS cluster.
###

on:
  workflow_dispatch:
    inputs:
      SERVICE:
        type: string
        description: "ECS service name"
        default: ""
      ALL_SERVICES:
        type: boolean
        description: "Update all services in the ECS cluster"
        default: false
      RUNNER_LABEL:
        type: string
        description: "Runner label"
        default: "ubuntu-latest"

jobs:

  update_ecs_services:
    name: "Restarting ${{ (!inputs.all_services && format('{0}', inputs.service)) || (inputs.all_services && format('All services')) }} in ${{ inputs.aws_profile }} deploy service"
    runs-on: ${{ inputs.RUNNER_LABEL }}
    container:
      image: quay.io/lifebiteng/terragrunt:18b0523
    steps:
    - name: Create folders
      run: mkdir -p ~/.aws
    - run: echo "SERVICES=job-process-metrics-dev2 data-factory-dev2 controller-aws-stg web-application-stg api-server-dev passport-issuer-stg web-application-dev2 composer-api-dev2 nf-config-dev2 nextflow-server-dev2 connect-cohort-browser-dev jupyter-proxy-dev2 resource-tags-dev cohort-browser-stg data-factory-dev connect-api-dev jupyter-proxy-stg controller-aws-dev2 airlock-api-dev api-monitor-dev resource-tags-stg airlock-webapp-dev2 metadata-search-dev2 metadata-search-dev data-catalogue-dev2 data-access-dev2 cohort-browser-dev airlock-api-dev2 api-message-gateway-dev2 web-application-dev controller-aws-dev nf-config-dev api-server-dev2 api-server-stg passport-issuer-dev composer-workflow-export-dev2 cohort-browser-dev2 data-access-stg jupyter-proxy-dev airlock-api-stg resource-tags-dev2 airlock-webapp-dev nf-config-stg data-access-dev private-airlock-api-dev passport-issuer-dev2 passport-broker-dev zipkin-stg data-catalogue-dev api-monitor-stg api-monitor-dev2 airlock-webapp-stg" >> $GITHUB_OUTPUT
      id: list-services
    - id: address_service_name
      run: echo 'SERVICE_NAME=" ${{ inputs.service }} "' >> $GITHUB_OUTPUT
    - name: update ${{ inputs.service }} ECS services
      if: contains(steps.list-services.outputs.SERVICES, ' ${{ inputs.service }} ') && !inputs.all_services
      run: |
        echo ":recycle: ${{ inputs.service }} in ${{ inputs.cluster }} cluster has been updated in ${{ inputs.aws_profile }}." >> $GITHUB_STEP_SUMMARY
    - name: update ${{ inputs.service }} ECS services
      if: github.ref_name == inputs.apply_branch && !contains(steps.list-services.outputs.SERVICES, ' ${{ inputs.service }} ') && !inputs.all_services
      run: |
        echo ":warning: ${{ inputs.service }} in ${{ inputs.cluster }} cluster hasn't been found in ${{ inputs.aws_profile }}" >> $GITHUB_STEP_SUMMARY
