name: Pipeline de Github

permissions:
  actions: write
  contents: write
  deployments: write

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Instalar dependencias
        run: pip3 install gitlint
      
      - name: Verificar convenciones de commit
        run: |
          gitlint -c title-match-regex.regex='^(?:build|breaking|chore|ci|docs|feat|fix|style|refactor|perf|test|skip|none|patch): .*'

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Configure GitVersion
        run: |
          cat << EOF > /tmp/GitVersion.yml
          # mode: ContinuousDelivery
          mode: MainLine # Only add this if you want every version to be created automatically on your main branch.
          tag-prefix: "[vV]"
          major-version-bump-message: "^(build|chore|docs|feat|fix|perf|refactor|revert|style)(\\([\\w\\s-]*\\))?(!:|:.*\\n\\n((.+\\n)+\\n)?BREAKING CHANGE:\\s.+)"
          minor-version-bump-message: "^(feat)(\\([\\w\\s-]*\\))?:"
          patch-version-bump-message: "^(build|chore|docs|fix|perf|refactor|revert|style|test)(\\([\\w\\s-]*\\))?:"
          no-bump-message: '(none|skip|ci|test):\s?'
          EOF

      - name: Print Config
        run: cat /tmp/GitVersion.yml

      - name: Display GitVersion config
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          configFilePath: /tmp/GitVersion.yml
          additionalArguments: '/showConfig'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          configFilePath: /tmp/GitVersion.yml

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.gitversion.outputs.semVer }}
          tag_prefix: v

      # - name: Get the version
      #   run: echo "The version is ${{ steps.gitversion.outputs.semVer }}"

      # Tag the commit


      
      
      

      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 16

      # - name: Verificar convenciones de commit
      #   run: npx conventional-changelog-eslint -i ${{ github.event.inputs.range }} -p angular

      # - name: Lint commits, branches, and pull requests
      #   uses: aschbacd/gitlint-action@v1.1.0
      #   with:
      #     re-commit-message-subject: ^(\[[A-Z]+\-[0-9]+\] )?[A-Z].*((?!\.).)$
      #     re-pull-request-title: ^(\[[A-Z]+\-[0-9]+\] )?[A-Z].*((?!\.).)$

      # - name: Generar registro de cambios
      #   run: npx conventional-changelog -i ${{ github.event.inputs.range }} -s -p angular -o CHANGELOG.md

      # - name: Generar versiones
      #   run: npx standard-version --skip.changelog

      # - name: Bump version and push tag
      #   uses: anothrNick/github-tag-action@1.61.0 # Don't use @master unless you're happy to test the latest version
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     WITH_V: true

      # - name: Bump version and push tag
      #   id: tag_version
      #   uses: mathieudutour/github-tag-action@v6.1
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Create a GitHub release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     tag: ${{ steps.tag_version.outputs.new_tag }}
      #     name: Release ${{ steps.tag_version.outputs.new_tag }}
      #     body: ${{ steps.tag_version.outputs.changelog }}


        # https://github.com/anothrNick/github-tag-action
