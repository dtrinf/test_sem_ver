name: Check Conventional Commits and Update PR with Release Version

permissions:
  actions: write
  contents: write
  deployments: write

on:
  push:
    branches:
      - main

jobs:
  check-conventional-commits:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - run: npm install conventional-commits --global
      - run: conventional-commits --verify
      - run: |
          echo "The release version is: $(conventional-commits --get-release-version)" >> release-version.txt
          echo "Updating PR with release version."
          echo "" >> pr.md
          echo "## Release Version" >> pr.md
          echo "The release version for this pull request is $(cat release-version.txt)." >> pr.md
          echo "" >> pr.md
      - uses: actions/github-script@v3
        with:
          script: |
            gh pr update --title "PR title" --body "PR body" --head ${{ github.ref }} --base main
  

#----
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Clonar el repositorio
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: '0'

  #     - name: Instalar dependencias
  #       run: pip3 install gitlint
      
  #     - name: Verificar convenciones de commit
  #       run: |
  #         gitlint -c title-match-regex.regex='^(?:mayor|build|breaking|chore|ci|docs|feat|fix|style|refactor|perf|test|skip|none|patch)(.*)?(!:|:.*)'

  #     - name: Install GitVersion
  #       uses: gittools/actions/gitversion/setup@v0
  #       with:
  #         versionSpec: '5.x'

  #     - name: Configure GitVersion
  #       run: |
  #         cat << EOF > /tmp/GitVersion.yml
  #         mode: ContinuousDelivery
  #         # mode: MainLine # Only add this if you want every version to be created automatically on your main branch.
  #         tag-prefix: "[vV]"
  #         major-version-bump-message: '^(build|mayor)(.*)?(!:|:.*)'
  #         minor-version-bump-message: '^(chore|docs|feat|fix|perf|refactor|revert)(.*)?(!:|:.*)'
  #         patch-version-bump-message: '^(docs|fix|style)(.*)?(!:|:.*)'
  #         no-bump-message: '(none|skip|ci|test):\s?'
  #         EOF

  #     - name: Print Config
  #       run: cat /tmp/GitVersion.yml

  #     - name: Display GitVersion config
  #       uses: gittools/actions/gitversion/execute@v0
  #       with:
  #         useConfigFile: true
  #         configFilePath: /tmp/GitVersion.yml
  #         additionalArguments: '/showConfig'

  #     - name: Run GitVersion
  #       id: gitversion
  #       uses: gittools/actions/gitversion/execute@v0
  #       with:
  #         useConfigFile: true
  #         configFilePath: /tmp/GitVersion.yml

  #     - name: Bump version and push tag
  #       id: tag_version
  #       uses: mathieudutour/github-tag-action@v6.1
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         custom_tag: ${{ steps.gitversion.outputs.semVer }}
  #         tag_prefix: v

  # --------

      # - name: Get the version
      #   run: echo "The version is ${{ steps.gitversion.outputs.semVer }}"

      # Tag the commit


      
      
      

      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 16

      # - name: Verificar convenciones de commit
      #   run: npx conventional-changelog-eslint -i ${{ github.event.inputs.range }} -p angular

      # - name: Lint commits, branches, and pull requests
      #   uses: aschbacd/gitlint-action@v1.1.0
      #   with:
      #     re-commit-message-subject: ^(\[[A-Z]+\-[0-9]+\] )?[A-Z].*((?!\.).)$
      #     re-pull-request-title: ^(\[[A-Z]+\-[0-9]+\] )?[A-Z].*((?!\.).)$

      # - name: Generar registro de cambios
      #   run: npx conventional-changelog -i ${{ github.event.inputs.range }} -s -p angular -o CHANGELOG.md

      # - name: Generar versiones
      #   run: npx standard-version --skip.changelog

      # - name: Bump version and push tag
      #   uses: anothrNick/github-tag-action@1.61.0 # Don't use @master unless you're happy to test the latest version
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     WITH_V: true

      # - name: Bump version and push tag
      #   id: tag_version
      #   uses: mathieudutour/github-tag-action@v6.1
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Create a GitHub release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     tag: ${{ steps.tag_version.outputs.new_tag }}
      #     name: Release ${{ steps.tag_version.outputs.new_tag }}
      #     body: ${{ steps.tag_version.outputs.changelog }}


        # https://github.com/anothrNick/github-tag-action
